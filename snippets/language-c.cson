'.source.c, .source.cpp, .source.objc, .source.objcpp':
  '#ifndef … #define … #endif':
    'prefix': 'def'
    'body': '#ifndef ${1:SYMBOL}\n#define $1 ${2:value}\n#endif'
  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:.h}>'
  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:.h}"'
  '#pragma mark':
    'prefix': 'mark'
    'body': '#if 0\n${1:#pragma mark -\n}#pragma mark $2\n#endif\n\n$0'
  'main()':
    'prefix': 'main'
    'body': 'int main(int argc, char const *argv[]) {\n    ${1:/* code */}\n    return 0;\n}'
  'For Loop':
    'prefix': 'for'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}${3:++}) \n{\n    ${4:/* code */}\n}'
  'Header Include-Guard':
    'prefix': 'once'
    'body': '#ifndef ${1:SYMBOL}\n#define $1\n\n${2}\n\n#endif /* end of include guard: $1 */\n'
  'Shared Pointer':
    'prefix': 'sp'
    'body': 'typedef std::shared_ptr<${2:${1:my_type}_t}> ${3:${4:my_type}_ptr};'
  'Typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int} ${2:MyCustomType};'
  'Do While Loop':
    'prefix': 'do'
    'body': 'do {\n    ${0:/* code */}\n} while(${1:/* condition */});'
  'While Loop':
    'prefix': 'while'
    'body': 'while (${1:/* condition */}) {\n    ${2:/* code */}\n}'
  'fprintf':
    'prefix': 'fprintf'
    'body': 'fprintf(${1:stderr}, "${2:%s}\\\\n", $3);$4'
  'If One Line':
    'prefix': 'if1'
    'body': '(${1:/* condition */}) ? ${2:/* do if true */} : ${3:/* otherwise... */}'
  'If Two Lines':
    'prefix': 'if2'
    'body': 'if (${1:/* condition */}) \n    ${2: /* do if true */}'
  'If Condition':
    'prefix': 'if'
    'body': 'if (${1:/* condition */}) \n{\n    ${2:/* code */}\n}'
  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:/* condition */}) \n{\n    ${2:/* code */}\n} \nelse \n{\n    ${3:/* code */}\n}'
  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:/* condition */}) \n{\n    ${2:/* code */}\n} \nelse if (${3:/* condition */}) \n{\n    ${4:/* code */}\n}'
  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:/* condition */}) \n{\n    ${2:/* code */}\n} \nelse if (${3:/* condition */}) \n{\n    ${4:/* code */}\n} \nelse \n{\n    ${5:/* code */}\n}'
  'Switch Statement':
    'prefix': 'switch'
    'body': 'switch (${1:/* expression */}) \n{\n    case ${2:/* value */}:\n}'
  'case':
    'prefix': 'cs'
    'body': 'case ${1:/* value */}:$0'
  'printf':
    'prefix': 'printf'
    'body': 'printf("${1:%s}\\\\n", $2);$3'
  'scanf':
    'prefix': 'scanf'
    'body': 'scanf(\"${1:%s}\\\\n\", $2);$3'
  'Struct':
    'prefix': 'st'
    'body': 'struct ${1:name_t} {\n    ${2:/* data */}\n};'
  'void':
    'prefix': 'void'
    'body': 'void ${1:name}(${2:/* arguments */}) {\n    ${3:/* code */}\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:int} ${2:name}(${3:/* arguments */}) \n{\n    ${5:/* code */}\n    return ${4:0};\n}'
  'write file':
    'prefix': 'wf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","w");\nif (${1:fp}!=NULL)\n{\n    fprintf(${1:fp},"${3:Some String\\\\n}");\n    fclose (${1:fp});\n}'
  'read file':
    'prefix': 'rf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","r");\nif (${1:fp}!=NULL)\n{\n    fscanf(${1:fp},"${3:Some String\\\\n}", ${3:&var});\n    fclose (${1:fp});\n}'
'.source.cpp, .source.objcpp':
  'Enumeration':
    'prefix': 'enum'
    'body': 'enum ${1:name} { $0 };'
  'Class':
    'prefix': 'cl'
    'body': 'class ${1:name_t} {\n  private:\n    ${0:/* data */}\n\n  public:\n    ${1:name_t} (${2:arguments});\n    virtual ~${1:name_t} ();\n};'
  'Namespace':
    'prefix': 'ns'
    'body': 'namespace ${1:name} {\n    $2\n} /* $1 */'
  'cout':
    'prefix': 'cout'
    'body': 'std::cout << \"${1:/* message */}\" << \'\\\\n\';'
  'cin':
    'prefix': 'cin'
    'body': 'std::cin >> ${1:/* variable */};'
  'cerr':
    'prefix': 'cerr'
    'body': 'std::cerr << \"${1:/* error message */}\" << \'\\\\n\';'
  'std::map':
    'prefix': 'map'
    'body': 'std::map<${1:key}, ${2:value}> map$3;'
  'std::string':
    'prefix': 'str'
    'body': 'std::string'
  'std::vector':
    'prefix': 'vector'
    'body': 'std::vector<${1:int}> v$2;'
  'template <typename>':
    'prefix': 'tp'
    'body': 'template <typename ${1:T}>'
  'output file':
    'prefix': 'outf'
    'body': 'std::ofstream ${1:afile}("${2:filename.txt}", std::ios::out);\nif (${1:afile}.is_open()) {\n    ${1:afile} << "${3:This is a line.}\\\\n";\n    ${1:afile}.close();\n}'
  'input file':
    'prefix': 'inf'
    'body': 'std::ifstream ${1:afile}("${2:filename.txt}", std::ios::in);\nif (${1:afile}.is_open()) {\n    std::string line;\n    while (std::getline(${1:afile}, line)) {\n        std::cout << line << \'\\\\n\';\n    }\n    ${1:afile}.close();\n}\nelse {\n    std::cerr << "Unable to open file\\\\n";\n}'
